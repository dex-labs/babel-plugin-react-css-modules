{"version":3,"file":"createSpreadMapper.js","names":["_core","require","_types","_optionsDefaults","_interopRequireDefault","e","__esModule","default","createSpreadMapper","path","stats","result","attributeNames","optionsDefaults","opts","attributes","Object","entries","filter","pair","attributeKeys","map","spreadAttributes","node","openingElement","attribute","isJSXSpreadAttribute","forEach","spread","attributeKey","destinationName","binaryExpression","conditionalExpression","cloneNode","argument","stringLiteral","logicalExpression","memberExpression","identifier","_default","exports"],"sources":["../src/createSpreadMapper.js"],"sourcesContent":["// @flow\n\nimport { NodePath } from '@babel/core';\n\nimport {\n  cloneNode,\n  Expression,\n  memberExpression,\n  binaryExpression,\n  conditionalExpression,\n  stringLiteral,\n  logicalExpression,\n  identifier,\n  isJSXSpreadAttribute,\n} from '@babel/types';\n\nimport optionsDefaults from './schemas/optionsDefaults';\n\nconst createSpreadMapper = (path: typeof NodePath, stats: any): {\n  [destinationName: string]: typeof Expression,\n  ...\n} => {\n  const result = {};\n\n  let { attributeNames } = optionsDefaults;\n\n  if (stats.opts && stats.opts.attributeNames) {\n    attributeNames = { ...attributeNames, ...stats.opts.attributeNames };\n  }\n\n  const attributes = Object\n    .entries(attributeNames)\n    .filter((pair) => pair[1]);\n\n  const attributeKeys = attributes.map((pair) => pair[0]);\n\n  const spreadAttributes = path.node.openingElement.attributes\n    .filter((attribute) => isJSXSpreadAttribute(attribute));\n\n  spreadAttributes.forEach((spread) => {\n    attributeKeys.forEach((attributeKey) => {\n      const destinationName = attributeNames[attributeKey];\n\n      if (result[destinationName]) {\n        result[destinationName] = binaryExpression(\n          '+',\n          result[destinationName],\n          conditionalExpression(\n            cloneNode(spread.argument),\n            binaryExpression(\n              '+',\n              stringLiteral(' '),\n              logicalExpression(\n                '||',\n                memberExpression(\n                  cloneNode(spread.argument),\n                  identifier(destinationName),\n                ),\n                stringLiteral(''),\n              ),\n            ),\n            stringLiteral(''),\n          ),\n        );\n      } else {\n        result[destinationName] = conditionalExpression(\n          cloneNode(spread.argument),\n          logicalExpression(\n            '||',\n            memberExpression(\n              cloneNode(spread.argument),\n              identifier(destinationName),\n            ),\n            stringLiteral(''),\n          ),\n          stringLiteral(''),\n        );\n      }\n    });\n  });\n\n  return result;\n};\n\nexport default createSpreadMapper;\n"],"mappings":";;;;;;AAEA,IAAAA,KAAA,GAAAC,OAAA;AAEA,IAAAC,MAAA,GAAAD,OAAA;AAYA,IAAAE,gBAAA,GAAAC,sBAAA,CAAAH,OAAA;AAAwD,SAAAG,uBAAAC,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAExD,MAAMG,kBAAkB,GAAGA,CAACC,IAAqB,EAAEC,KAAU,KAGxD;EACH,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAI;IAAEC;EAAe,CAAC,GAAGC,wBAAe;EAExC,IAAIH,KAAK,CAACI,IAAI,IAAIJ,KAAK,CAACI,IAAI,CAACF,cAAc,EAAE;IAC3CA,cAAc,GAAG;MAAE,GAAGA,cAAc;MAAE,GAAGF,KAAK,CAACI,IAAI,CAACF;IAAe,CAAC;EACtE;EAEA,MAAMG,UAAU,GAAGC,MAAM,CACtBC,OAAO,CAACL,cAAc,CAAC,CACvBM,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,CAAC;EAE5B,MAAMC,aAAa,GAAGL,UAAU,CAACM,GAAG,CAAEF,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,CAAC;EAEvD,MAAMG,gBAAgB,GAAGb,IAAI,CAACc,IAAI,CAACC,cAAc,CAACT,UAAU,CACzDG,MAAM,CAAEO,SAAS,IAAK,IAAAC,2BAAoB,EAACD,SAAS,CAAC,CAAC;EAEzDH,gBAAgB,CAACK,OAAO,CAAEC,MAAM,IAAK;IACnCR,aAAa,CAACO,OAAO,CAAEE,YAAY,IAAK;MACtC,MAAMC,eAAe,GAAGlB,cAAc,CAACiB,YAAY,CAAC;MAEpD,IAAIlB,MAAM,CAACmB,eAAe,CAAC,EAAE;QAC3BnB,MAAM,CAACmB,eAAe,CAAC,GAAG,IAAAC,uBAAgB,EACxC,GAAG,EACHpB,MAAM,CAACmB,eAAe,CAAC,EACvB,IAAAE,4BAAqB,EACnB,IAAAC,gBAAS,EAACL,MAAM,CAACM,QAAQ,CAAC,EAC1B,IAAAH,uBAAgB,EACd,GAAG,EACH,IAAAI,oBAAa,EAAC,GAAG,CAAC,EAClB,IAAAC,wBAAiB,EACf,IAAI,EACJ,IAAAC,uBAAgB,EACd,IAAAJ,gBAAS,EAACL,MAAM,CAACM,QAAQ,CAAC,EAC1B,IAAAI,iBAAU,EAACR,eAAe,CAC5B,CAAC,EACD,IAAAK,oBAAa,EAAC,EAAE,CAClB,CACF,CAAC,EACD,IAAAA,oBAAa,EAAC,EAAE,CAClB,CACF,CAAC;MACH,CAAC,MAAM;QACLxB,MAAM,CAACmB,eAAe,CAAC,GAAG,IAAAE,4BAAqB,EAC7C,IAAAC,gBAAS,EAACL,MAAM,CAACM,QAAQ,CAAC,EAC1B,IAAAE,wBAAiB,EACf,IAAI,EACJ,IAAAC,uBAAgB,EACd,IAAAJ,gBAAS,EAACL,MAAM,CAACM,QAAQ,CAAC,EAC1B,IAAAI,iBAAU,EAACR,eAAe,CAC5B,CAAC,EACD,IAAAK,oBAAa,EAAC,EAAE,CAClB,CAAC,EACD,IAAAA,oBAAa,EAAC,EAAE,CAClB,CAAC;MACH;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOxB,MAAM;AACf,CAAC;AAAC,IAAA4B,QAAA,GAAAC,OAAA,CAAAjC,OAAA,GAEaC,kBAAkB","ignoreList":[]}