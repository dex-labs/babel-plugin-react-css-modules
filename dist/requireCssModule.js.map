{"version":3,"file":"requireCssModule.js","names":["_fs","require","_path","_postcssModulesParser","_interopRequireDefault","_postcss","_postcssModulesExtractImports","_postcssModulesLocalByDefault","_postcssModulesScope","_postcssModulesValues","_getLocalIdent","_interopRequireWildcard","_optionsDefaults","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","getFiletypeOptions","cssSourceFilePath","filetypes","extension","slice","lastIndexOf","filetype","getSyntax","filetypeOptions","syntax","getExtraPlugins","plugins","map","plugin","Array","isArray","pluginName","pluginOptions","getTokens","extraPluginsRunner","runner","options","from","res","readFileSync","transform","process","warnings","forEach","message","console","warn","text","root","tokens","_default","generateScopedName","clazz","resourcePath","getLocalIdent","optionsDefaults","unescape","context","cwd","hashDigest","hashDigestLength","hashFunction","hashSalt","hashStrategy","regExp","extraPlugins","length","postcss","fetch","to","fromDirectoryPath","dirname","toPath","resolve","Values","LocalByDefault","ExtractImports","newScopePlugin","Parser","exports"],"sources":["../src/requireCssModule.js"],"sourcesContent":["// @flow\n\nimport {\n  readFileSync,\n} from 'fs';\nimport {\n  dirname,\n  resolve,\n} from 'path';\nimport Parser from '@dr.pogodin/postcss-modules-parser';\nimport postcss from 'postcss';\nimport ExtractImports from 'postcss-modules-extract-imports';\nimport LocalByDefault from 'postcss-modules-local-by-default';\nimport newScopePlugin from 'postcss-modules-scope';\nimport Values from 'postcss-modules-values';\nimport getLocalIdent, {\n  unescape,\n} from './getLocalIdent';\nimport optionsDefaults from './schemas/optionsDefaults';\nimport type {\n  GenerateScopedNameConfigurationType,\n  StyleModuleMapType,\n} from './types';\n\ntype PluginType = string | $ReadOnlyArray<[string, mixed]>;\n\n/* eslint-enable flowtype/no-mixed */\n\ntype FiletypeOptionsType = {|\n  +syntax: string,\n  +plugins?: $ReadOnlyArray<PluginType>,\n|};\n\ntype FiletypesConfigurationType = {\n  [key: string]: FiletypeOptionsType,\n  ...\n};\n\n/* eslint-disable flowtype/no-weak-types */\ntype SyntaxType = Function | Object;\n\n/* eslint-enable flowtype/no-weak-types */\n\ntype OptionsType = {|\n  filetypes: FiletypesConfigurationType,\n  generateScopedName?: GenerateScopedNameConfigurationType,\n  context?: string,\n  transform?: Function\n|};\n\nconst getFiletypeOptions = (\n  cssSourceFilePath: string,\n  filetypes: FiletypesConfigurationType,\n): ?FiletypeOptionsType => {\n  const extension = cssSourceFilePath.slice(cssSourceFilePath.lastIndexOf('.'));\n  const filetype = filetypes ? filetypes[extension] : null;\n\n  return filetype;\n};\n\nconst getSyntax = (filetypeOptions: FiletypeOptionsType): ?(SyntaxType) => {\n  if (!filetypeOptions || !filetypeOptions.syntax) {\n    return null;\n  }\n\n  // eslint-disable-next-line global-require, import/no-dynamic-require\n  return require(filetypeOptions.syntax);\n};\n\nconst getExtraPlugins = (filetypeOptions: ?FiletypeOptionsType): $ReadOnlyArray<any> => {\n  if (!filetypeOptions || !filetypeOptions.plugins) {\n    return [];\n  }\n\n  return filetypeOptions.plugins.map((plugin) => {\n    if (Array.isArray(plugin)) {\n      const [pluginName, pluginOptions] = plugin;\n\n      // eslint-disable-next-line global-require, import/no-dynamic-require\n      return require(pluginName)(pluginOptions);\n    }\n\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    return require(plugin);\n  });\n};\n\nconst getTokens = (\n  extraPluginsRunner: any,\n  runner: any,\n  cssSourceFilePath: string,\n  filetypeOptions: ?FiletypeOptionsType,\n  pluginOptions: OptionsType,\n): StyleModuleMapType => {\n  const options: Object = {\n    from: cssSourceFilePath,\n  };\n\n  if (filetypeOptions) {\n    options.syntax = getSyntax(filetypeOptions);\n  }\n\n  let res = readFileSync(cssSourceFilePath, 'utf-8');\n\n  if (pluginOptions.transform) {\n    res = pluginOptions.transform(res, cssSourceFilePath, pluginOptions);\n  }\n\n  if (extraPluginsRunner) {\n    res = extraPluginsRunner.process(res, options);\n  }\n\n  res = runner.process(res, options);\n\n  res.warnings().forEach((message) => {\n    // eslint-disable-next-line no-console\n    console.warn(message.text);\n  });\n\n  return res.root.tokens;\n};\n\nexport default (cssSourceFilePath: string, options: OptionsType): StyleModuleMapType => {\n  // eslint-disable-next-line prefer-const\n  let runner: any;\n  let generateScopedName;\n\n  if (options.generateScopedName && typeof options.generateScopedName === 'function') {\n    generateScopedName = options.generateScopedName;\n  } else {\n    generateScopedName = (clazz: string, resourcePath: string) => getLocalIdent(\n      // TODO: The loader context used by \"css-loader\" may has additional\n      // stuff inside this argument (loader context), allowing for some edge\n      // cases (though, presumably not with a typical configurations)\n      // we don't support (yet?).\n      { resourcePath },\n\n      options.generateScopedName || optionsDefaults.generateScopedName,\n      unescape(clazz),\n      {\n        clazz,\n        context: options.context || process.cwd(),\n\n        // TODO: These options should match their counterparts in Webpack\n        // configuration:\n        //  - https://webpack.js.org/configuration/output/#outputhashdigest\n        //  - https://webpack.js.org/configuration/output/#outputhashdigestlength\n        //  - https://webpack.js.org/configuration/output/#outputhashfunction\n        //  - https://webpack.js.org/configuration/output/#outputhashsalt\n        // and they should be exposed as babel-plugin-react-css-modules\n        // options. However, for now they are just hardcoded equal to\n        // the Webpack's default settings.\n        hashDigest: 'hex',\n        hashDigestLength: 20,\n        hashFunction: 'md4',\n        hashSalt: '',\n\n        // TODO: This option was introduced by css-loader@6.6.0.\n        // To keep getLocalIdent() in sync with css-loader implementation,\n        // I updated the code there, but similar to the parameters above,\n        // it is not yet exposed as this plugin's option.\n        hashStrategy: 'resource-path-and-local-name',\n\n        // TODO: This one allows for some path modifications during\n        // the transform. Probably, not a Webpack param.\n        regExp: '',\n      },\n    );\n  }\n\n  const filetypeOptions = getFiletypeOptions(cssSourceFilePath, options.filetypes);\n\n  const extraPlugins = getExtraPlugins(filetypeOptions);\n  const extraPluginsRunner = extraPlugins.length && postcss(extraPlugins);\n\n  const fetch = (to: string, from: string) => {\n    const fromDirectoryPath = dirname(from);\n    const toPath = resolve(fromDirectoryPath, to);\n\n    return getTokens(\n      extraPluginsRunner,\n      runner,\n      toPath,\n      filetypeOptions,\n      options,\n    );\n  };\n\n  const plugins = [\n    Values,\n    LocalByDefault,\n    ExtractImports,\n    newScopePlugin({\n      generateScopedName,\n    }),\n    new Parser({\n      fetch,\n    }),\n  ];\n\n  runner = postcss(plugins);\n\n  return getTokens(\n    extraPluginsRunner,\n    runner,\n    cssSourceFilePath,\n    filetypeOptions,\n    options,\n  );\n};\n"],"mappings":"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","ignoreList":[]}