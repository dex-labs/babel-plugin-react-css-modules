{"version":3,"file":"createObjectExpression.js","names":["_types","_interopRequireWildcard","require","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","createObjectExpression","types","object","properties","keys","forEach","name","value","newValue","isAnyTypeAnnotation","stringLiteral","booleanLiteral","TypeError","push","objectProperty","objectExpression","_default","exports"],"sources":["../src/createObjectExpression.js"],"sourcesContent":["// @flow\n\nimport BabelTypes, {\n  ObjectExpression,\n} from '@babel/types';\n\ntype InputObjectType = {\n  [key: string]: any,\n  ...\n};\n\n/**\n * Creates an AST representation of an InputObjectType shape object.\n */\nconst createObjectExpression = (\n  types: typeof BabelTypes,\n  object: InputObjectType,\n): typeof ObjectExpression => {\n  const properties = [];\n\n  Object.keys(object).forEach((name) => {\n    const value = object[name];\n\n    let newValue;\n\n    if (!types.isAnyTypeAnnotation(value)) {\n      switch (typeof value) {\n        case 'string':\n          newValue = types.stringLiteral(value);\n          break;\n        case 'object':\n          newValue = createObjectExpression(types, value);\n          break;\n        case 'boolean':\n          newValue = types.booleanLiteral(value);\n          break;\n        case 'undefined':\n          return;\n        default:\n          throw new TypeError(`Unexpected type: ${typeof value}`);\n      }\n    }\n\n    properties.push(\n      types.objectProperty(\n        types.stringLiteral(name),\n        newValue,\n      ),\n    );\n  });\n\n  return types.objectExpression(properties);\n};\n\nexport default createObjectExpression;\n"],"mappings":";;;;;;AAEA,IAAAA,MAAA,GAAAC,uBAAA,CAAAC,OAAA;AAEsB,SAAAC,yBAAAC,CAAA,6BAAAC,OAAA,mBAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,CAAAC,CAAA,WAAAA,CAAA,GAAAG,CAAA,GAAAD,CAAA,KAAAF,CAAA;AAAA,SAAAH,wBAAAG,CAAA,EAAAE,CAAA,SAAAA,CAAA,IAAAF,CAAA,IAAAA,CAAA,CAAAI,UAAA,SAAAJ,CAAA,eAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,WAAAK,OAAA,EAAAL,CAAA,QAAAG,CAAA,GAAAJ,wBAAA,CAAAG,CAAA,OAAAC,CAAA,IAAAA,CAAA,CAAAG,GAAA,CAAAN,CAAA,UAAAG,CAAA,CAAAI,GAAA,CAAAP,CAAA,OAAAQ,CAAA,KAAAC,SAAA,UAAAC,CAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,CAAA,IAAAd,CAAA,oBAAAc,CAAA,OAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,EAAAc,CAAA,SAAAG,CAAA,GAAAP,CAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAb,CAAA,EAAAc,CAAA,UAAAG,CAAA,KAAAA,CAAA,CAAAV,GAAA,IAAAU,CAAA,CAAAC,GAAA,IAAAP,MAAA,CAAAC,cAAA,CAAAJ,CAAA,EAAAM,CAAA,EAAAG,CAAA,IAAAT,CAAA,CAAAM,CAAA,IAAAd,CAAA,CAAAc,CAAA,YAAAN,CAAA,CAAAH,OAAA,GAAAL,CAAA,EAAAG,CAAA,IAAAA,CAAA,CAAAe,GAAA,CAAAlB,CAAA,EAAAQ,CAAA,GAAAA,CAAA;AAOtB;AACA;AACA;AACA,MAAMW,sBAAsB,GAAGA,CAC7BC,KAAwB,EACxBC,MAAuB,KACK;EAC5B,MAAMC,UAAU,GAAG,EAAE;EAErBX,MAAM,CAACY,IAAI,CAACF,MAAM,CAAC,CAACG,OAAO,CAAEC,IAAI,IAAK;IACpC,MAAMC,KAAK,GAAGL,MAAM,CAACI,IAAI,CAAC;IAE1B,IAAIE,QAAQ;IAEZ,IAAI,CAACP,KAAK,CAACQ,mBAAmB,CAACF,KAAK,CAAC,EAAE;MACrC,QAAQ,OAAOA,KAAK;QAClB,KAAK,QAAQ;UACXC,QAAQ,GAAGP,KAAK,CAACS,aAAa,CAACH,KAAK,CAAC;UACrC;QACF,KAAK,QAAQ;UACXC,QAAQ,GAAGR,sBAAsB,CAACC,KAAK,EAAEM,KAAK,CAAC;UAC/C;QACF,KAAK,SAAS;UACZC,QAAQ,GAAGP,KAAK,CAACU,cAAc,CAACJ,KAAK,CAAC;UACtC;QACF,KAAK,WAAW;UACd;QACF;UACE,MAAM,IAAIK,SAAS,CAAC,oBAAoB,OAAOL,KAAK,EAAE,CAAC;MAC3D;IACF;IAEAJ,UAAU,CAACU,IAAI,CACbZ,KAAK,CAACa,cAAc,CAClBb,KAAK,CAACS,aAAa,CAACJ,IAAI,CAAC,EACzBE,QACF,CACF,CAAC;EACH,CAAC,CAAC;EAEF,OAAOP,KAAK,CAACc,gBAAgB,CAACZ,UAAU,CAAC;AAC3C,CAAC;AAAC,IAAAa,QAAA,GAAAC,OAAA,CAAA/B,OAAA,GAEac,sBAAsB","ignoreList":[]}